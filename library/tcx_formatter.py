
class TCXFormatter:
    
    
    
    # Legitimate Fields:
    # <Time>															2022-01-15T14:16:06+09:00				</Time>
    # <DistanceMeters>													x.x float round 1 decimal no padding	</DistanceMeters>
    # <AltitudeMeters>													x.x float round 1 decimal no padding	</AltitudeMeters>
    # <HeartRateBpm xsi:type="HeartRateInBeatsPerMinute_t"><Value>		int no padding							</Value></HeartRateBpm>
    # <Cadence>															int no padding							</Cadence>
    # <Speed>															x.xxx									</Speed>
    # <Position>
    #        <LatitudeDegrees>											34.332638								</LatitudeDegrees>
    #        <LongitudeDegrees>											133.967667								</LongitudeDegrees>
    
    
    def kph_to_ms(self, kph):
        return kph / 3.6
    
    
    def startTCX(self, activityName):
    
        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + \
        "\n<TrainingCenterDatabase xsi:schemaLocation=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2 " + \
        "http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd\" " + \
        "xmlns:ns5=\"http://www.garmin.com/xmlschemas/ActivityGoals/v1\" " + \
        "xmlns:ns3=\"http://www.garmin.com/xmlschemas/ActivityExtension/v2\" " + \
        "xmlns:ns2=\"http://www.garmin.com/xmlschemas/UserProfile/v2\" " + \
        "xmlns=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\" " + \
        "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">" + \
        f"\n  <Folders/>\n  <Courses>\n    <Course>\n      <Name>{activityName}</Name>\n      <Lap>\n        <Track>"

    def endTCX(self, creator):
        
        return f"\n        </Track>\n      </Lap>\n    </Course>\n  </Courses>\n</TrainingCenterDatabase>\n<!-- Generated by {creator}-->"
    
    
    def newTrackpoint(self, dictionary):
        
        trackpoint = "\n        <Trackpoint>"
        
        try:
            time = dictionary["Time"]
            trackpoint += f"\n          <Time>{time}</Time>"
        except:
            pass
        
        try:
            distanceMeters = round(dictionary["DistanceMeters"], 1)
            trackpoint += f"\n          <DistanceMeters>{distanceMeters}</DistanceMeters>"
        except:
            pass
        
        try:
            altitudeMeters = round(dictionary["AltitudeMeters"], 1)
            trackpoint += f"\n          <AltitudeMeters>{altitudeMeters}</AltitudeMeters>"
        except:
            pass
        
        try:
            heartRateBpm = int(dictionary["HeartRateBpm"])
            trackpoint += f"\n          <HeartRateBpm xsi:type=\"HeartRateInBeatsPerMinute_t\"><Value>{heartRateBpm}</Value></HeartRateBpm>"
        except:
            pass
        
        try:
            cadence = int(dictionary["Cadence"])
            trackpoint += f"\n          <Cadence>{cadence}</Cadence>"
        except:
            pass
        
        try:
            ms = self.kph_to_ms(dictionary["Speed"])
            speed = round(ms, 3)
            trackpoint += f"\n          <Speed>{speed}</Speed>"
        except:
            pass
        
        try:
            position = "\n          <Position>"
            latlon = dictionary["Position"]
            position += f"\n            <LatitudeDegrees>{latlon[0]}</LatitudeDegrees>"
            position += f"\n            <LongitudeDegrees>{latlon[1]}</LongitudeDegrees>"
            position += "\n          </Position>"
            trackpoint += position
        except:
            pass
        
        trackpoint += "\n        </Trackpoint>"
            
            
        return trackpoint
    

            
#g = TCXFormatter()
#tcx = g.startTCX("Test Activity")


#f = open("TestActivity.tcx", "w")
#f.write(tcx)
#f.close()

#f = open("TestActivity.tcx", "a")
#f.write(g.newTrackpoint({"Time": "2022-01-15T13:06:24+09:00", "DistanceMeters": 0.0, "Speed": 0.0, "Position":[34.338577, 134.115952]}))
#f.close()

#f = open("TestActivity.tcx", "a")
#f.write(g.newTrackpoint({"Time": "2022-01-15T13:06:25+09:00", "DistanceMeters": 5.0, "Speed": 10.4, "Position":[34.338585, 134.115921]}))
#f.close()

#f = open("TestActivity.tcx", "a")
#f.write(g.newTrackpoint({"Time": "2022-01-15T13:06:26+09:00", "DistanceMeters": 8.0, "Speed": 11.2, "Position":[34.338589, 134.115891]}))
#f.close()

#f = open("TestActivity.tcx", "a")
#f.write(g.endTCX("Keith"))
#f.close()

"""
        </Track>
      </Lap>
    </Course>
  </Courses>
</TrainingCenterDatabase>\n<!-- Generated by {creator}-->
"""